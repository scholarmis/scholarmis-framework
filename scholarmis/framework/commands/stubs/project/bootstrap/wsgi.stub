"""
WSGI config for scholarmis project.

This module contains the WSGI application used by Django's development server
and any production WSGI deployments. It should expose a module-level variable
named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover
this application via the ``WSGI_APPLICATION`` setting.

Usually you will have the standard Django WSGI application here, but it also
might make sense to replace the whole Django WSGI application with a custom one
that later delegates to the Django one. For example, you could introduce WSGI
middleware here, or combine a Django application with an application of another
framework.

"""

import os
import sys
import atexit
from pathlib import Path

from django.core.wsgi import get_wsgi_application

from scholarmis.framework.services import service_registry


os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.production")

# This application object is used by any WSGI server configured to use this
# file. This includes Django's development server, if the WSGI_APPLICATION
# setting points here.
application = get_wsgi_application()


# Start the services
# We use the atexit module for clean shutdown
@atexit.register
def shutdown_services():
    """
    Stops all singleton services gracefully on application shutdown.
    This works reliably with most WSGI servers.
    """
    try:
        # Access the app_registry from the settings module
        service_registry.stop_singletons()
    except Exception as e:
        pass

try:
    # Access the app_registry from the settings module
    service_registry.start_singletons()
except Exception as e:
    # If startup fails, we should terminate gracefully
    sys.exit(1)

# Now the application is fully ready to serve requests